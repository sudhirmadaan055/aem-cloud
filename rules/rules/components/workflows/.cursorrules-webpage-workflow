# AEM Web Page Analysis Workflow

## ЁЯЪи MANDATORY: Rule File Behavior - NO EXCEPTIONS (AI Reference Only)

**тЪая╕П CRITICAL: MANDATORY COMPLIANCE SYSTEM - READ FIRST:**
1. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-mandatory-compliance` FIRST** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-compliance-checklist` BEFORE ANY RESPONSE** - **NO EXCEPTIONS**
3. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-dependency-mapper` FOR DEPENDENCY CHAIN** - **NO EXCEPTIONS**
4. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-compliance-monitor` FOR REAL-TIME MONITORING** - **NO EXCEPTIONS**
5. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-emergency-protocol` FOR VIOLATION HANDLING** - **NO EXCEPTIONS**
6. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-system-override` FOR SYSTEM ENFORCEMENT** - **NO EXCEPTIONS**
7. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/components/analysis/.cursorrules-design-analysis` FOR COMPONENT CLASSIFICATION** - **NO EXCEPTIONS**

## ЁЯЪи CRITICAL: WEB PAGE ANALYSIS WORKFLOW - NO EXCEPTIONS

**тЪая╕П CRITICAL: This workflow analyzes live websites and extracts reusable AEM components**

**ЁЯЪи CRITICAL: CONSISTENCY ENFORCEMENT ACROSS ALL ENVIRONMENTS:**
- **ЁЯЪи MANDATORY: Same analysis process on all systems** - New folders, cursor instances, laptops
- **ЁЯЪи MANDATORY: Same component identification logic** - Consistent detection across environments
- **ЁЯЪи MANDATORY: Same naming conventions** - Actual titles and headings from webpage content
- **ЁЯЪи MANDATORY: Same complexity assessment** - Standardized Simple/Medium/High classification
- **ЁЯЪи MANDATORY: Same interactive element detection** - Consistent pattern recognition
- **ЁЯЪи MANDATORY: Same design token extraction** - Standardized color, typography, spacing analysis
- **ЁЯЪи MANDATORY: Same output format** - Identical presentation structure across all environments

### **ЁЯЪи MANDATORY: STEP 1 - WEB PAGE URL VALIDATION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: BEFORE ANY ANALYSIS, VALIDATE WEB PAGE URL:**
1. **ЁЯЪи MANDATORY: Parse URL format** - Extract domain, path, and parameters
2. **ЁЯЪи MANDATORY: Validate URL accessibility** - Ensure URL is publicly accessible
3. **ЁЯЪи MANDATORY: Check URL format** - Must be valid HTTP/HTTPS URL
4. **ЁЯЪи MANDATORY: Extract page context** - Identify if homepage, product page, article, etc.

### **ЁЯЪи MANDATORY: STEP 2 - WEB PAGE CONTENT EXTRACTION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: WEB SEARCH-BASED ANALYSIS APPROACH - NO EXCEPTIONS:**
1. **ЁЯЪи MANDATORY: Use web_search tool for page analysis** - Search for specific page content, structure, and design patterns
2. **ЁЯЪи MANDATORY: Extract HTML structure from search results** - Get page layout and component patterns from search results
3. **ЁЯЪи MANDATORY: Identify CSS classes and styling from search results** - Extract styling patterns and design tokens
4. **ЁЯЪи MANDATORY: Analyze content blocks from search results** - Identify distinct content sections from search results
5. **ЁЯЪи MANDATORY: Extract text content from search results** - Get headings, paragraphs, button text from search results
6. **ЁЯЪи MANDATORY: Identify images and media from search results** - Extract image sources and media elements from search results
7. **ЁЯЪи MANDATORY: Map interactive elements from search results** - Buttons, forms, navigation, carousels from search results
8. **ЁЯЪи MANDATORY: Extract design tokens from search results** - Colors, typography, spacing patterns from search results

### **ЁЯЪи MANDATORY: STEP 3 - COMPONENT IDENTIFICATION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: COMPONENT IDENTIFICATION RULES - NO EXCEPTIONS:**
1. **ЁЯЪи MANDATORY: Count only top-level visual sections** - Don't break down into sub-components
2. **ЁЯЪи MANDATORY: Identify distinct visual boundaries** - Look for background changes, spacing, borders
3. **ЁЯЪи MANDATORY: Recognize complex components** - Dashboards, carousels, grids as single components
4. **ЁЯЪи MANDATORY: Follow visual hierarchy** - Header, Hero, Content areas, Footer as separate components
5. **ЁЯЪи MANDATORY: Count interactive sections** - Carousels, navigation menus, forms as single components
6. **ЁЯЪи MANDATORY: Identify layout patterns** - Grid systems, card layouts, dashboard widgets
7. **ЁЯЪи MANDATORY: Avoid over-decomposition** - If visually one section, it's one component
8. **ЁЯЪи MANDATORY: Count total distinct sections** - Determine exact number of top-level components
9. **ЁЯЪи MANDATORY: Scan for ALL visual sections systematically** - Not just those with obvious titles
10. **ЁЯЪи MANDATORY: Identify functional components** - Even without explicit titles
11. **ЁЯЪи MANDATORY: Use actual webpage titles and headings as component names when available** - Extract exact titles, headings, and section names from webpage content
12. **ЁЯЪи MANDATORY: Create descriptive names for components without titles** - Based on function and visual appearance
13. **ЁЯЪи MANDATORY: Never create generic component names** - Always use meaningful, descriptive names
14. **ЁЯЪи MANDATORY: Recognize unified sections with sub-content blocks** - Sections with main title and multiple content blocks are single components
15. **ЁЯЪи MANDATORY: Identify main section titles** - Look for primary headings that encompass multiple sub-elements
16. **ЁЯЪи MANDATORY: Count sections by visual boundaries, not sub-headings** - One background = one component, regardless of internal content blocks

### **ЁЯЪи MANDATORY: STEP 4 - COMPONENT ANALYSIS - NO EXCEPTIONS**

**тЪая╕П CRITICAL: ANALYZE EACH IDENTIFIED COMPONENT USING DESIGN ANALYSIS RULES:**
1. **ЁЯЪи MANDATORY: LISTING COMPONENT DETECTION FIRST** - Check for search, filters, pagination, sorting (PRIMARY CLASSIFICATION)
2. **ЁЯЪи MANDATORY: CAROUSEL COMPONENT DETECTION** - Check for multiple slides, navigation indicators, carousel controls
3. **ЁЯЪи MANDATORY: Follow Step 2A: Interactive UI Pattern Detection** - Scan for navigation elements, content switching mechanisms, interactive elements
4. **ЁЯЪи MANDATORY: Follow Step 2B: Interactive Component Classification Rules** - Classify based on interaction patterns, not visual appearance
5. **ЁЯЪи MANDATORY: Determine component type** - Static Content, Interactive Content, Layout Component, Form Component, Listing Component
6. **ЁЯЪи MANDATORY: Assess complexity level** - Simple, Medium, High based on interaction requirements
7. **ЁЯЪи MANDATORY: Identify interactive features** - Navigation, content switching, user interactions, state management
8. **ЁЯЪи MANDATORY: Map content structure** - Text fields, image fields, link fields, multifields
9. **ЁЯЪи MANDATORY: Extract design patterns** - Colors, typography, spacing, visual effects
10. **ЁЯЪи MANDATORY: Plan AEM implementation** - HTL structure, Sling Model, dialog configuration

### **ЁЯЪи MANDATORY: STEP 5 - DESIGN TOKEN EXTRACTION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: EXTRACT DESIGN SYSTEM FROM WEB PAGE:**
1. **ЁЯЪи MANDATORY: Extract color palette** - Primary, secondary, accent colors
2. **ЁЯЪи MANDATORY: Identify typography** - Font families, sizes, weights, line heights
3. **ЁЯЪи MANDATORY: Map spacing system** - Margins, padding, grid spacing
4. **ЁЯЪи MANDATORY: Extract visual effects** - Shadows, borders, rounded corners, gradients
5. **ЁЯЪи MANDATORY: Identify responsive patterns** - Mobile, tablet, desktop adaptations
6. **ЁЯЪи MANDATORY: Map component variations** - Different states, sizes, themes

### **ЁЯЪи MANDATORY: STEP 6 - COMPONENT MAPPING - NO EXCEPTIONS**

**тЪая╕П CRITICAL: MAP WEB PAGE ELEMENTS TO AEM COMPONENTS:**
1. **ЁЯЪи MANDATORY: Create component inventory** - List all identified components
2. **ЁЯЪи MANDATORY: Map to AEM patterns** - Standard components, custom components
3. **ЁЯЪи MANDATORY: Plan component hierarchy** - Parent-child relationships
4. **ЁЯЪи MANDATORY: Identify reusable patterns** - Common UI elements across pages
5. **ЁЯЪи MANDATORY: Plan component variations** - Different states and configurations
6. **ЁЯЪи MANDATORY: Map content relationships** - How components work together

### **ЁЯЪи MANDATORY: STEP 6.5 - CHECK FOR EXISTING COMPONENTS - NO EXCEPTIONS**

**тЪая╕П CRITICAL: BEFORE PRESENTING ANALYSIS, CHECK FOR EXISTING COMPONENTS:**

1. **ЁЯЪи MANDATORY: Search existing AEM components** - Use `codebase_search` to find similar components
2. **ЁЯЪи MANDATORY: Check component names** - Look for exact matches or similar naming patterns
3. **ЁЯЪи MANDATORY: Compare functionality** - Match component types and interactive elements
4. **ЁЯЪи MANDATORY: Identify existing vs new** - Categorize components as existing, modified, or new

### **ЁЯЪи MANDATORY: STEP 7 - USER INTERFACE PRESENTATION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: PRESENT ANALYSIS RESULTS IN CLEAN FORMAT:**

**ЁЯЪи MANDATORY: User Instruction Format - NO EXCEPTIONS**
**тЪая╕П CRITICAL: When presenting web page analysis results, ALWAYS use this exact format:**

```
Web Page Analysis: [URL]
Page Type: [Homepage/Product Page/Article/etc.]
Component Count: X distinct components identified

**Component Analysis:**

| # | Component Name | Type | Complexity | Interactive Elements |
|---|----------------|------|------------|---------------------|
| 1 | [Component Name 1] | [Type] | [Complexity] | [Interactive Elements] |
| 2 | [Component Name 2] | [Type] | [Complexity] | [Interactive Elements] |
| 3 | [Component Name 3] | [Type] | [Complexity] | [Interactive Elements] |
| ... | ... | ... | ... | ... |
| X | [Component Name X] | [Type] | [Complexity] | [Interactive Elements] |

**Component Count:** X distinct components identified in the web page

**Existing Components (X):**
- [Component Name] - [Reason for match]

**Modified Components (X):**
- [Component Name] - [What needs modification]

**New Components (X):**
- [Component Name]

**Summary by Type:**
- **[Type] Components (X):** [Component Names]
- **[Type] Components (X):** [Component Names]

**Summary by Complexity:**
- **Simple (X):** [Component Names]
- **Medium (X):** [Component Names]
- **High (X):** [Component Names]

**Design Tokens Extracted:**
- **Colors:** [Primary, Secondary, Accent colors]
- **Typography:** [Font families, sizes, weights]
- **Spacing:** [Margin, padding patterns]
- **Effects:** [Shadows, borders, rounded corners]
```

**ЁЯЪи CRITICAL: This format MUST be used for ALL web page analysis presentations - NO EXCEPTIONS**
**ЁЯЪи CRITICAL: This exact format ensures consistency across all environments - New folders, cursor instances, laptops**

### **ЁЯЪи MANDATORY: STEP 8 - OPTIONS PRESENTATION - NO EXCEPTIONS**

**тЪая╕П CRITICAL: After showing the analysis format, ALWAYS immediately show these options:**

```
### 1. **Create Component Definition** - Generate components.json file
### 2. **Develop Component** - Generate AEM component code  
### 3. **Modify Component** - Update the component definition
### 4. **Start Over** - Analyze a different web page

**Which option? (1, 2, 3, or 4)**
```

**ЁЯЪи CRITICAL: This options display is MANDATORY and cannot be skipped - NO EXCEPTIONS**
**ЁЯЪи CRITICAL: These exact options ensure consistency across all environments - New folders, cursor instances, laptops**

## ЁЯЪи ANTI-MISBEHAVIOR RULES

**тЪая╕П CRITICAL: NEVER do these things:**
1. **NEVER ask for information not specified in this rule file**
2. **NEVER assume what the user wants**
3. **NEVER skip reading rule files**
4. **NEVER deviate from the exact process specified**
5. **NEVER add your own interpretation of what should happen next**
6. **NEVER ask for web page details before following the exact process in this file**
7. **NEVER bypass the user interface flow specified in this file**
8. **NEVER skip web page analysis when web page URL is provided**
9. **NEVER proceed without extracting design tokens**
10. **NEVER skip component identification step**
11. **NEVER skip web_search analysis** - Must use web_search for URL-based analysis and component identification
12. **NEVER over-decompose components** - Count only top-level visual sections
13. **NEVER break down complex components** - Dashboards, carousels, grids are single components
14. **NEVER ignore visual boundaries** - Follow distinct visual sections as component boundaries
15. **NEVER skip design analysis rules** - Must follow interactive pattern detection and component classification rules
16. **NEVER use generic component names** - Must use actual webpage titles, headings, and section names as component names when available
17. **NEVER skip interactive element detection** - Must scan for navigation, content switching, user interactions
18. **NEVER classify without interaction analysis** - Must analyze what component DOES, not just how it looks
19. **NEVER create component names** - Always extract and use the exact titles and headings from the webpage content when available
20. **NEVER miss visual sections** - Must scan systematically for ALL visual sections, not just those with titles
21. **NEVER skip functional components** - Must identify components based on function and visual appearance
22. **NEVER over-decompose unified sections** - Sections with main title and multiple content blocks are single components
23. **NEVER break down sections by sub-headings** - Count by visual boundaries, not internal content structure

## ЁЯЪи CRITICAL: WEB PAGE ANALYSIS BEST PRACTICES

### **Common Web Page Components to Look For:**
- **Listing Component** - Search boxes, filters, pagination, sorting (PRIMARY DETECTION)
- **Carousel Component** - Multiple slides, navigation indicators, carousel controls (PRIMARY DETECTION)
- **Header Component** - Complete header section with logo, navigation, utility links
- **Hero Banner Component** - Large banners with carousel functionality, navigation controls
- **Dashboard Component** - Financial widgets, data displays, multiple information panels
- **Content Grid Component** - Article lists, feature grids, card layouts with complex patterns
- **News/Updates Component** - News sections with carousels, date sorting, category filtering
- **Footer Component** - Complete footer with links, social media, logos, copyright
- **Interactive Elements** - Carousels, accordions, tabs, modals as part of larger components

### **Design Token Extraction Guidelines:**
- **Colors** - Extract from CSS, background colors, text colors, accent colors
- **Typography** - Font families, sizes, weights from headings and body text
- **Spacing** - Margins, padding, grid gaps from layout structure
- **Effects** - Shadows, borders, rounded corners from visual styling

### **Component Complexity Assessment:**
- **Simple** - Static content, basic styling, no JavaScript required
- **Medium** - Some interactivity, basic JavaScript, simple state management
- **High** - Complex interactions, advanced JavaScript, state management, API calls, carousels, dashboards

### **Web Search-Based Analysis Guidelines:**
- **LISTING COMPONENT DETECTION FIRST** - Check for search, filters, pagination, sorting (PRIMARY DETECTION)
- **CAROUSEL COMPONENT DETECTION** - Check for multiple slides, navigation indicators, carousel controls
- **Use web_search for page structure** - Search for specific page content and layout information
- **Extract component patterns from search results** - Identify distinct sections from search results
- **Count top-level sections only** - Don't break down complex components into sub-components
- **Recognize layout patterns from search results** - Grid systems, carousels, dashboards are single components
- **Follow content hierarchy from search results** - Header, Hero, Content areas, Footer as separate components
- **Identify interactive elements from search results** - Carousels, navigation, forms within components
- **Scan for ALL visual sections systematically** - Not just those with obvious titles
- **Identify functional components** - Even without explicit titles
- **Extract actual titles and headings when available** - Use exact webpage titles, headings, and section names as component names
- **Create descriptive names for components without titles** - Based on function and visual appearance
- **Never create generic names** - Always use meaningful, descriptive names
- **Recognize unified sections with sub-content blocks** - Sections with main title and multiple content blocks are single components
- **Count by visual boundaries, not sub-headings** - One background = one component, regardless of internal content blocks

## ЁЯЪи CRITICAL: COMPLIANCE ENFORCEMENT

**тЪая╕П CRITICAL: This web page analysis workflow is MANDATORY:**
1. **ЁЯЪи MANDATORY: No web page analysis without following this workflow** - Not allowed
2. **ЁЯЪи MANDATORY: No skipping of analysis steps** - Not allowed
3. **ЁЯЪи MANDATORY: No deviation from user interface format** - Not allowed
4. **ЁЯЪи MANDATORY: No proceeding without design token extraction** - Not allowed
5. **ЁЯЪи MANDATORY: No deviation from consistency rules** - Same process across all environments
6. **ЁЯЪи MANDATORY: No environment-specific variations** - Identical analysis on all systems

**тЪая╕П CRITICAL: ANY violation of this workflow results in immediate failure and restart requirement.**
**тЪая╕П CRITICAL: CONSISTENCY IS ENFORCED ACROSS ALL ENVIRONMENTS - New folders, cursor instances, laptops, systems**
