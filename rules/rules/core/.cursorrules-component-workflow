# AEM Component Development Workflow

## ЁЯЪи MANDATORY: Rule File Behavior - NO EXCEPTIONS (AI Reference Only)

**тЪая╕П CRITICAL: MANDATORY COMPLIANCE SYSTEM - READ FIRST:**
1. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-mandatory-compliance` FIRST** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-compliance-checklist` BEFORE ANY RESPONSE** - **NO EXCEPTIONS**
3. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-dependency-mapper` FOR DEPENDENCY CHAIN** - **NO EXCEPTIONS**
4. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-compliance-monitor` FOR REAL-TIME MONITORING** - **NO EXCEPTIONS**
5. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-emergency-protocol` FOR VIOLATION HANDLING** - **NO EXCEPTIONS**
6. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/system/.cursorrules-system-override` FOR SYSTEM ENFORCEMENT** - **NO EXCEPTIONS**
7. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/compliance/.cursorrules-code-quality-enforcement` FOR CODE QUALITY** - **NO EXCEPTIONS**
8. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/CodeQuality-rules-latest-CS-2024-12-0.xlsx` FOR CLOUD PIPELINE COMPLIANCE** - **NO EXCEPTIONS**

**тЪая╕П CRITICAL: ALWAYS read this rule file first before executing any AEM component development tasks:**
1. **ЁЯЪи MANDATORY: ALWAYS read the rule file first** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: Follow all component development rules exactly** - **NO MODIFICATIONS**
3. **ЁЯЪи MANDATORY: Apply best practices as specified** - **NO SKIPPING**
4. **ЁЯЪи MANDATORY: Reference other rule files when mentioned** - **NO IGNORING**
5. **ЁЯЪи MANDATORY: Maintain consistency across all environments** - **SAME PROCESS ON ALL SYSTEMS**
6. **ЁЯЪи MANDATORY: Use actual titles and headings from source content** - **NO GENERIC COMPONENT NAMES**


### **CRITICAL : Component Development Rules**
- **Design Analysis**: **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/components/analysis/.cursorrules-design-analysis` FIRST** - **NO EXCEPTIONS** (13-step analysis process with component existence checking)
- **Component Structure**: Follow `rules/rules/components/generation/.cursorrules-aem-component-structure` (file structure, dialogs, multifields)
- **CSS Generation**: **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/components/generation/.cursorrules-css-generation` FIRST** - **NO EXCEPTIONS** (design-accurate CSS generation with 90%+ visual accuracy)
- **HTL Best Practices**: Follow `rules/rules/components/generation/.cursorrules-htl-best-practices` (index logic, layout distribution)
- **Dialog Configuration**: Use `rules/rules/components/generation/.cursorrules-aem-dialogs` (field types, validation, RTE, tabbed dialogs, multifield structure)
- **Complexity Management**: Apply `rules/rules/components/frameworks/.cursorrules-aem-complexity` (Simple, Medium, High levels)
- **Listing Components**: Reference `rules/rules/components/workflows/.cursorrules-aem-listing` (framework approach)
- **Carousel Components**: Follow carousel-specific development workflow (multifield approach)

## ЁЯЪи CRITICAL: COMPONENT TYPE CLASSIFICATION - ZERO TOLERANCE
**тЪая╕П CRITICAL: This section prevents component type misclassification across all environments:**

### **ЁЯЪи MANDATORY: COMPONENT TYPE DETECTION PROTOCOL - NO EXCEPTIONS**
**тЪая╕П CRITICAL: When ANY component is detected, IMMEDIATELY classify it correctly:**

#### **ЁЯЪи MANDATORY: LISTING COMPONENT DETECTION - ONLY FOR TRUE LISTINGS**
**тЪая╕П CRITICAL: Listing components are ONLY components with:**
- **Search functionality** (search boxes, filters)
- **Dynamic content loading** (AJAX, pagination)
- **Database/repository queries** (Query Builder, JCR queries)
- **Sorting and filtering capabilities**
- **Pagination controls**

**тЪая╕П CRITICAL: When TRUE listing component is detected, IMMEDIATELY execute this protocol:**
1. **ЁЯЪи MANDATORY: STOP ALL ACTIONS IMMEDIATELY** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: READ `rules/rules/components/workflows/.cursorrules-aem-listing` COMPLETELY** - **NO EXCEPTIONS**
3. **ЁЯЪи MANDATORY: EXECUTE STEP 1: FRAMEWORK DETECTION** - **NO EXCEPTIONS**
4. **ЁЯЪи MANDATORY: EXECUTE STEP 2: FRAMEWORK IMPLEMENTATION DECISION** - **NO EXCEPTIONS**
5. **ЁЯЪи MANDATORY: EXECUTE STEP 3: FRAMEWORK CREATION (if needed)** - **NO EXCEPTIONS**
6. **ЁЯЪи MANDATORY: EXECUTE STEP 4: LISTING-SPECIFIC IMPLEMENTATION** - **NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT DETECTION - NOT LISTINGS**
**тЪая╕П CRITICAL: Carousel components are NOT listing components. They are:**
- **Static content display** (pre-configured slides/items)
- **Navigation controls** (arrows, dots, indicators)
- **Slide-based interaction** (previous/next, auto-play)
- **Multifield-based content** (author-configured slides)
- **No dynamic queries** (no database/repository searches)

**тЪая╕П CRITICAL: When carousel component is detected, follow carousel-specific workflow:**
1. **ЁЯЪи MANDATORY: Classify as Medium Complexity** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: Follow carousel-specific development workflow** - **NO EXCEPTIONS**
3. **ЁЯЪи MANDATORY: Use multifield dialog structure** - **NO EXCEPTIONS**
4. **ЁЯЪи MANDATORY: Implement carousel JavaScript functionality** - **NO EXCEPTIONS**

## ЁЯЪи CRITICAL: CAROUSEL COMPONENT DEVELOPMENT WORKFLOW - ZERO TOLERANCE
**тЪая╕П CRITICAL: This section defines the mandatory carousel component development process:**

### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT DETECTION PROTOCOL - NO EXCEPTIONS**
**тЪая╕П CRITICAL: When carousel component is detected, IMMEDIATELY execute this protocol:**

1. **ЁЯЪи MANDATORY: STOP ALL ACTIONS IMMEDIATELY** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: CLASSIFY AS MEDIUM COMPLEXITY** - **NO EXCEPTIONS**
3. **ЁЯЪи MANDATORY: EXECUTE CAROUSEL-SPECIFIC WORKFLOW** - **NO EXCEPTIONS**
4. **ЁЯЪи MANDATORY: USE MULTIFIELD DIALOG STRUCTURE** - **NO EXCEPTIONS**
5. **ЁЯЪи MANDATORY: IMPLEMENT CAROUSEL JAVASCRIPT** - **NO EXCEPTIONS**

### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT DEVELOPMENT RULES - NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: CAROUSEL DIALOG STRUCTURE**
- **ЁЯЪи MANDATORY: Use multifield dialog for slides** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Each slide has: Image, Title, Description, Link** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include carousel settings: Auto-play, Speed, Navigation** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Use simple fixedcolumns dialog structure** - **NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: CAROUSEL HTL TEMPLATE**
- **ЁЯЪи MANDATORY: Use data-sly-list for slide iteration** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include navigation controls (arrows, dots)** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Use proper ARIA labels for accessibility** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include responsive breakpoints** - **NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: CAROUSEL JAVASCRIPT**
- **ЁЯЪи MANDATORY: Implement slide navigation functionality** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include touch/swipe support for mobile** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Implement auto-play functionality** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include keyboard navigation support** - **NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: CAROUSEL SCSS**
- **ЁЯЪи MANDATORY: Use CSS Grid or Flexbox for layout** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include responsive breakpoints** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Implement smooth transitions** - **NO EXCEPTIONS**
- **ЁЯЪи MANDATORY: Include hover effects for navigation** - **NO EXCEPTIONS**

### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT VIOLATION PREVENTION**
**тЪая╕П CRITICAL: These rules prevent carousel component violations:**

1. **ЁЯЪи MANDATORY: NEVER use Query Builder for carousel content** - **IMMEDIATE FAILURE**
2. **ЁЯЪи MANDATORY: NEVER create carousel servlets** - **IMMEDIATE FAILURE**
3. **ЁЯЪи MANDATORY: NEVER use AJAX for carousel content loading** - **IMMEDIATE FAILURE**
4. **ЁЯЪи MANDATORY: NEVER treat carousel as High Complexity** - **IMMEDIATE FAILURE**
5. **ЁЯЪи MANDATORY: ALWAYS use multifield dialogs for carousel content** - **IMMEDIATE FAILURE**

### **ЁЯЪи CRITICAL: VIOLATION PREVENTION RULES - ZERO TOLERANCE**
**тЪая╕П CRITICAL: These rules prevent component type misclassification violations:**

#### **ЁЯЪи MANDATORY: LISTING COMPONENT VIOLATION PREVENTION**
1. **ЁЯЪи MANDATORY: NEVER create components.json for listing components without framework detection** - **IMMEDIATE FAILURE**
2. **ЁЯЪи MANDATORY: NEVER assume listing components can be created without framework** - **IMMEDIATE FAILURE**
3. **ЁЯЪи MANDATORY: NEVER skip the 4-step framework process** - **IMMEDIATE FAILURE**
4. **ЁЯЪи MANDATORY: NEVER proceed with listing component creation without AEM project structure** - **IMMEDIATE FAILURE**
5. **ЁЯЪи MANDATORY: NEVER create listing components in isolation** - **IMMEDIATE FAILURE**

#### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT VIOLATION PREVENTION**
1. **ЁЯЪи MANDATORY: NEVER treat carousel components as listing components** - **IMMEDIATE FAILURE**
2. **ЁЯЪи MANDATORY: NEVER apply listing framework to carousel components** - **IMMEDIATE FAILURE**
3. **ЁЯЪи MANDATORY: NEVER use Query Builder or JCR queries for carousel content** - **IMMEDIATE FAILURE**
4. **ЁЯЪи MANDATORY: NEVER create carousel servlets for content fetching** - **IMMEDIATE FAILURE**
5. **ЁЯЪи MANDATORY: ALWAYS use multifield dialogs for carousel content** - **IMMEDIATE FAILURE**

### **ЁЯЪи CRITICAL: ENFORCEMENT ACCOUNTABILITY - NO EXCEPTIONS**
**тЪая╕П CRITICAL: Track and prevent violations:**

#### **ЁЯЪи MANDATORY: LISTING COMPONENT ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Log every listing component detection** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Verify framework detection execution** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Confirm framework implementation decision** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Validate framework creation completion** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Report any violations immediately** - **ACCOUNTABILITY**

#### **ЁЯЪи MANDATORY: CAROUSEL COMPONENT ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Log every carousel component detection** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Verify carousel is NOT treated as listing** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Confirm multifield dialog usage** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Validate carousel JavaScript implementation** - **ACCOUNTABILITY**
- **ЁЯЪи MANDATORY: Report any carousel misclassification immediately** - **ACCOUNTABILITY**
- **Component Rules**: Follow `rules/rules/components/frameworks/.cursorrules-aem-components` (general best practices)

### **ЁЯЪи MANDATORY: COMPLIANCE SYSTEM RULES - NO EXCEPTIONS**
- **Mandatory Compliance**: Follow `rules/rules/compliance/.cursorrules-mandatory-compliance` (core compliance system)
- **Compliance Checklist**: Use `rules/rules/compliance/.cursorrules-compliance-checklist` (pre-response validation)
- **Dependency Mapping**: Follow `rules/rules/system/.cursorrules-dependency-mapper` (rule file dependencies)
- **Compliance Monitoring**: Use `rules/rules/compliance/.cursorrules-compliance-monitor` (real-time monitoring)
- **Emergency Protocol**: Follow `rules/rules/system/.cursorrules-emergency-protocol` (violation handling)
- **System Override**: Use `rules/rules/system/.cursorrules-system-override` (system enforcement)

### **Technical Implementation Rules**
- **Cloud Service**: Comply with `rules/rules/technical/.cursorrules-aem-cloud`
- **Sling Framework**: Follow `rules/rules/technical/.cursorrules-aem-sling`
- **Internationalization**: Use `rules/rules/technical/.cursorrules-aem-i18n`
- **Maven Build**: Follow `rules/rules/technical/.cursorrules-maven` (use `mvn` command directly)

### **Context Files**
- **Medium Complexity**: Create context in `context/component-context/medium-complexity/`
- **High Complexity**: Create context in `context/component-context/high-complexity/`
- **Templates**: Use provided templates for context files

---

## ЁЯОп **Component Complexity Levels** (AI Reference Only)

### **Simple Components**
- **No context file needed**
- Examples: Text, Image, Button, Banner
- Purely presentational with minimal fields

### **Medium Complexity Components**
- **Create context file in `context/component-context/medium-complexity/`**
- Examples: Teaser, Carousel, Accordion, Card Grid
- Multiple configurable fields with light business logic
- **ЁЯЪи CRITICAL: Carousel components are ALWAYS Medium Complexity - NOT High Complexity**
- **ЁЯЪи CRITICAL: Carousel components use multifield dialogs - NOT dynamic queries**

### **High Complexity Components**
- **Create context file in `context/component-context/high-complexity/`**
- **MANDATORY: Flag for architect review**
- Examples: Product Search Listing, Content Search Component, Location Finder, Multi-step Form
- Dynamic data, APIs, search, filtering, pagination
- **ЁЯЪи CRITICAL: Only components with dynamic queries and search functionality are High Complexity**
- **ЁЯЪи CRITICAL: Static carousels with multifield content are NOT High Complexity**

---

## ЁЯФз **Usage Workflow** (AI Reference Only)

### **ЁЯЪи MANDATORY: Step 0: Read Design Analysis Rules - NO EXCEPTIONS**

**тЪая╕П CRITICAL: BEFORE ANY ANALYSIS, ALWAYS READ DESIGN ANALYSIS RULES FIRST:**
1. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/components/analysis/.cursorrules-design-analysis` FIRST** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: Follow the 10-step analysis process exactly as specified** - **NO DEVIATIONS**
3. **ЁЯЪи MANDATORY: Apply component existence checking rules** - **REQUIRED**

### **ЁЯЪи MANDATORY: Step 1: Determine Image and Component Structure - NO EXCEPTIONS**

**тЪая╕П CRITICAL: AFTER READING DESIGN ANALYSIS RULES, FOLLOW THIS EXACT SEQUENCE:**

#### **ЁЯЪи MANDATORY: Step 1A: Analyze Images and Components - REQUIRED FIRST (BEFORE ALL OTHERS)**
1. **ЁЯЪи MANDATORY: Count uploaded images** - Determine if single image or multiple images
2. **ЁЯЪи MANDATORY: Analyze each image individually** - Examine each design image separately
3. **ЁЯЪи MANDATORY: Count components per image** - Identify component count in each image
4. **ЁЯЪи MANDATORY: Determine processing scenario:**
   - **Scenario 1**: Single image with single component тЖТ Process as one component
   - **Scenario 2**: Single image with multiple components тЖТ Process each section as separate component
   - **Scenario 3**: Multiple images with single component each тЖТ Process each image as one component
   - **Scenario 4**: Multiple images with multiple components each тЖТ Process each section in each image as separate component
5. **ЁЯЪи MANDATORY: Display structure summary** - Show "Processing X images with Y total components"

#### **ЁЯЪи MANDATORY: Step 2: Component Identification - REQUIRED SECOND**

**тЪая╕П CRITICAL: AFTER DETERMINING COMPONENT TYPE, FOLLOW THIS EXACT SEQUENCE:**

#### **ЁЯЪи MANDATORY: Step 2A: Identify All Components - REQUIRED SECOND (AFTER COMPONENT COUNT)**
1. **ЁЯЪи MANDATORY: Extract all visual components** - Identify all distinct components from design
2. **ЁЯЪи MANDATORY: Count total components** - Determine exact number of components identified
3. **ЁЯЪи MANDATORY: Categorize all as New** - All components treated as new for consistency
4. **ЁЯЪи MANDATORY: Display Status Summary** - Show Existing (0), Modified (0), New (X)
5. **ЁЯЪи MANDATORY: Process All Components** - Apply 10-step analysis to all identified components

#### **ЁЯЪи MANDATORY: Step 2B: Show Component Status Summary - REQUIRED SECOND**
1. **ЁЯЪи MANDATORY: Display Status Summary** - Show count of Existing (0), Modified (0), and New (X) components
2. **ЁЯЪи MANDATORY: Process All Components** - Apply 10-step analysis to all identified components
3. **ЁЯЪи MANDATORY: Ensure Consistency** - Always show same format for predictable results

#### **ЁЯЪи MANDATORY: Step 2C: Read Design Analysis Rules - REQUIRED THIRD (BEFORE ANALYSIS)**
1. **ЁЯЪи MANDATORY: ALWAYS read `rules/rules/components/analysis/.cursorrules-design-analysis` FIRST** - **NO EXCEPTIONS**
2. **ЁЯЪи MANDATORY: Follow the 10-step analysis process exactly as specified** - **NO DEVIATIONS**
3. **ЁЯЪи MANDATORY: Apply component existence checking rules** - **REQUIRED**

#### **ЁЯЪи MANDATORY: Step 2D: Follow 10-Step Analysis Process - REQUIRED FOURTH (for New/Modified only)** (AI Reference Only)
   - **Step 1: Pattern Analysis** - Component type, primary interaction, content organization, framework (AI Reference Only)
   - **Step 2: Complexity Analysis** - Complexity level, reasoning, architecture requirements, review needs (AI Reference Only)
   - **Step 3: Functional Analysis** - Core functionality, user interactions, data flow, business logic (AI Reference Only)
   - **Step 4: Layout Structure Analysis** - Layout pattern, section positioning, column ratios, HTML structure (AI Reference Only)
   - **Step 5: Visual Style Analysis** - Color scheme, typography, spacing, visual effects, CSS variables (AI Reference Only)
   - **Step 6: Interactive Element Analysis** - Clickable elements, positioning, styling, interaction behavior (AI Reference Only)
   - **Step 7: Content Structure Analysis** - Content blocks, repeatable elements, text content, images (AI Reference Only)
   - **Step 8: Data Requirements Mapping** - Text fields, image fields, link fields, multifields, conditional fields (AI Reference Only)
   - **Step 9: Component Architecture Planning** - HTML structure, CSS naming, responsive behavior, accessibility (AI Reference Only)
   - **Step 10: Component Definition Created** - Generate components.json with complete component definition (AI Reference Only)
4. **MANDATORY: Validate Analysis** - Ensure all 10 steps are completed with meaningful explanations (AI Reference Only)
5. **MANDATORY: Create Context File** - If medium/high complexity, create context file in appropriate directory (AI Reference Only)
6. **MANDATORY: Present Next Options** - Show user options for next steps

#### **ЁЯЪи MANDATORY: User Interface Rules - NO EXCEPTIONS** (AI Reference Only)
1. **ЁЯЪи MANDATORY: Show only clean summary** - Display component count and status only
2. **ЁЯЪи MANDATORY: Hide internal processing** - Do NOT show step-by-step analysis details
3. **ЁЯЪи MANDATORY: Show final results only** - Display components.json creation and next options
4. **ЁЯЪи MANDATORY: Keep user interface minimal** - Present only essential information
5. **ЁЯЪи MANDATORY: Mark verbose content as (AI Reference Only)** - Internal processing details for AI only

#### **ЁЯЪи MANDATORY: What to Show vs Hide - NO EXCEPTIONS** (AI Reference Only)

**тЬЕ SHOW TO USER:**
- Image count and analysis details
- Component count and identification
- Component status breakdown (Existing, Modified, New)
- Component names and categories
- Next step options (1, 2, 3, 4, 5)
- Clean, informative interface

**ЁЯЪи MANDATORY: User Instruction Format - NO EXCEPTIONS**
**тЪая╕П CRITICAL: When presenting analysis results, ALWAYS use this exact format:**

```
Image Count: X image(s) uploaded
Image Analysis: [Single image containing multiple distinct visual sections] OR [Multiple images with single component each] OR [Multiple images with multiple components each]
Component Count: X distinct components identified in the image(s)

Existing Components (0)
Modified Components (0)
New Components (X):
	1. [Actual Component Name 1]
	2. [Actual Component Name 2]
	3. [Actual Component Name 3]
	...
	X. [Actual Component Name X]
```

**ЁЯЪи CRITICAL: This format MUST be used for ALL analysis presentations - NO EXCEPTIONS**
**ЁЯЪи CRITICAL: ALWAYS show Existing (0), Modified (0), New (X) for consistency - NO EXCEPTIONS**

**ЁЯЪи MANDATORY: ALWAYS SHOW OPTIONS AFTER ANALYSIS - NO EXCEPTIONS**
**тЪая╕П CRITICAL: After showing the analysis format, ALWAYS immediately show these options:**

```
### 1. **Review Component Definition** - Check the components.json file
### 2. **Develop Component** - Generate AEM component code  
### 3. **Modify Component** - Update the component definition
### 4. **Start Over** - Analyze a different image

**Which option? (1, 2, 3, or 4)**
```

**ЁЯЪи CRITICAL: This options display is MANDATORY and cannot be skipped - NO EXCEPTIONS**

**ЁЯЪи MANDATORY: Only show components.json creation confirmation AFTER actually creating the file**

**тЭМ HIDE FROM USER (AI Reference Only):**
- Step-by-step analysis details
- Internal processing steps
- Verbose component analysis
- Technical implementation details
- "Processing Component X of Y" messages
- Individual step completions
- Internal validation steps

**ЁЯЪи CRITICAL: User sees only clean summary and next options - NO EXCEPTIONS**

### **Step 2: Component Development**

#### **Single Component Development:**
1. **MANDATORY: Identify AEM Archetype Project**
   - Look for archetype projects at the same level as `aem-workflow` folder
   - If multiple projects found, ask user which project to use
   - If only one project found, use it automatically
   - If no project found, inform user to create AEM project first

#### **Multiple Components Development:** (AI Reference Only)
1. **MANDATORY: Identify AEM Archetype Project** (same as single)
2. **MANDATORY: Show batch development overview** - Display total components to be created
3. **MANDATORY: Process each component sequentially** - Create each component with full file structure
4. **MANDATORY: Show progress for each component** - Display "Creating Component X of Y" for each component
5. **MANDATORY: Generate all component files** - HTL, Sling Models, dialogs, SCSS for all components
6. **MANDATORY: Show batch completion summary** - Display total components created and file structure

2. **MANDATORY: Analyze Existing Component Patterns**
   - Examine existing components in `{project}/ui.apps/src/main/content/jcr_root/apps/{project}/components/`
   - Identify the project's dialog structure patterns (simple vs complex)
   - Check editConfig patterns (cq:inherit vs custom)
   - Understand component group naming conventions
3. **MANDATORY: Design-to-Dialog Mapping**
   - Map EVERY visual element to dialog fields
   - Identify multifield requirements for repeatable content
   - Plan fieldset structure for complex data
   - Ensure ALL design elements are captured in dialog
   - **MANDATORY: Extract actual content from images as default values**
   - **MANDATORY: Set default values for all text fields based on image content**
   - **MANDATORY: Extract visible text, titles, descriptions, and labels from design**
   - **MANDATORY: Use extracted content as initial values in dialog fields**
   - **ЁЯЪи MANDATORY: Validate multifield structure** - Follow exact multifield rules from dialog generation rules
   - **ЁЯЪи MANDATORY: Use composite multifield** - For 3+ fields per item, use composite structure with column container
4. Read `components.json` and context files
5. Generate complete AEM component code following:
   - `rules/rules/components/frameworks/.cursorrules-aem-components` for structure
   - `rules/rules/components/generation/.cursorrules-aem-dialogs` for authoring
   - `rules/rules/technical/.cursorrules-aem-sling` for backend logic
   - `rules/rules/technical/.cursorrules-aem-cloud` for Cloud Service compliance
6. **Place files in proper AEM project structure:**
   - HTL templates: `{project}/ui.apps/src/main/content/jcr_root/apps/{project}/components/`
   - Sling Models: `{project}/core/src/main/java/com/{groupId}/aem/core/models/`
   - Dialogs: `{project}/ui.apps/src/main/content/jcr_root/apps/{project}/components/`
   - SCSS: `ui.frontend/src/main/webpack/components/_{project}.scss`
   - JS: `ui.frontend/src/main/webpack/components/_{project}.js`
7. **ЁЯЪи MANDATORY: Generate Local Development Files - NO EXCEPTIONS**
   - **MANDATORY: Always generate an `index.html` file** for each new component in the frontend components directory
   - **MANDATORY: Local HTML location** - `ui.frontend/src/main/webpack/static/<folder name>/<component-name>/index.html`
   - **MANDATORY: Use fallback images from web** when no image is provided in local html file
   - **MANDATORY: Include required scripts and styles in every `index.html`:**
     - `/clientlib-base/css/base.css`
     - `/clientlib-dependencies/css/dependencies.css`
     - `/clientlib-dependencies/js/dependencies.js`
     - `/clientlib-base/js/c`
   - **MANDATORY: Ensure HTML structure is identical** between the Sightly (HTL) template and the generated `index.html` test file
   - **MANDATORY: This guarantees consistency** in appearance and behavior between local development and AEM deployment
8. **MANDATORY: Follow Project Conventions**
   - Use existing component patterns for dialogs (simple fixedcolumns vs complex tabs)
   - Use existing editConfig patterns (cq:inherit vs custom)
   - Match component group naming conventions
   - Always include `.content.xml` with proper `cq:Component` definition
9. **MANDATORY: Design Accuracy Validation**
   - Verify ALL visual elements from design are captured in dialog
   - Ensure multifield structures match repeatable content blocks
   - Confirm fieldset structure matches complex data requirements
   - Validate that component can recreate the exact design
   - **MANDATORY: Verify extracted content is set as default values in dialog fields**
   - **MANDATORY: Ensure all visible text from image appears as default values**
   - **ЁЯЪи MANDATORY: Multifield Structure Validation** - Verify multifield container has NO name attribute, inner fieldset/container has name attribute, child nodes follow nesting pattern
   - **ЁЯЪи MANDATORY: Composite Multifield Validation** - For 3+ fields, verify composite="{Boolean}true" and column container structure
   - **ЁЯЪи MANDATORY: Visual Elements Validation** - Every image/illustration in design must have corresponding dialog field
   - **ЁЯЪи MANDATORY: Authored Content Testing** - Verify multifield data displays correctly in HTL template
   - **ЁЯЪи MANDATORY: Sling Model Validation** - Use @ChildResource for composite multifields, proper logging with log4j
10. Include HTL, Sling Model, dialog, editConfig
11. Add ClientLibs if needed
12. **MANDATORY: Code Quality Validation**
    - Read `CodeQuality-rules-latest-CS-2024-12-0.xlsx` for current rules
    - Validate against Excel file security rules (Critical)
    - Validate against Excel file reliability rules (Critical)
    - Validate against Excel file maintainability rules (Important)
    - Ensure AEM-specific annotations are correct
    - Verify code follows quality templates
13. **MANDATORY: Generate Unit Tests**
    - Create test classes for Sling Models
    - Create test classes for Services (if applicable)
    - Create test classes for Servlets (if applicable)
    - Generate test data JSON files
    - Verify testing dependencies in pom.xml
    - Ensure minimum 50% coverage

### **Step 3: Quality Assurance**
1. **MANDATORY: Validate Component Structure**
   - Ensure `.content.xml` exists with `cq:Component` definition
   - Verify dialog structure matches project patterns
   - Confirm editConfig follows project conventions
   - Check all required files are in correct locations
2. Validate against complexity rules
3. Ensure architect review for high complexity
4. Test component functionality
5. Verify responsive behavior
6. Check accessibility compliance

### **ЁЯЪи MANDATORY: Step 4: Code Quality & Unit Testing - NO EXCEPTIONS**

**тЪая╕П CRITICAL: ALL components MUST follow SonarQube quality rules AND include comprehensive unit tests - NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: Code Quality Rules - CLOUD MANAGER COMPLIANCE**

**Before generating ANY component code, validate against SonarQube rules:**

**Primary Source**: `CodeQuality-rules-latest-CS-2024-12-0.xlsx` (Official Adobe Excel file)
**Reference**: Always use the latest Excel file for complete and up-to-date quality rules

**Quality Rules Validation Process:**
1. **Read Excel File**: Access `CodeQuality-rules-latest-CS-2024-12-0.xlsx` for current rules
2. **Apply Critical Rules**: Security, Reliability, Blocker issues (Pipeline Failure)
3. **Apply Important Rules**: Maintainability, Coverage, Code Smells (Pipeline Paused)
4. **Apply Info Rules**: Duplicated Lines, Open Issues, Cloud Service Compatibility
5. **Apply AEM-Specific Rules**: Framework patterns that remain consistent

**User Notification**: "тЬЕ Code quality rules from Excel file applied"

**AEM-Specific Rules (Static - Won't Change):**
- **@Model annotation**: Must be present and properly configured
- **@Inject annotation**: Use instead of @Reference for OSGi services
- **@Optional annotation**: Use for optional injections
- **@ValueMapValue**: Use for resource properties
- **@ChildResource**: Use for child resources

#### **ЁЯЪи MANDATORY: Unit Testing Requirements - ALL COMPONENTS**

**For EVERY component created, generate unit tests in:**
```
{project}/core/src/test/java/com/{groupId}/aem/core/
тФЬтФАтФА models/
тФВ   тФФтФАтФА {ComponentName}ModelTest.java
тФЬтФАтФА services/
тФВ   тФФтФАтФА {ServiceName}Test.java
тФФтФАтФА servlets/
    тФФтФАтФА {ServletName}Test.java
```

#### **ЁЯЪи MANDATORY: Test File Structure - NO EXCEPTIONS**

**1. Sling Model Tests:**
```java
@ExtendWith({AemContextExtension.class})
class {ComponentName}ModelTest {
    
    private final AemContext context = new AemContext();
    private {ComponentName}Model model;
    
    @BeforeEach
    void setUp() {
        context.addModelsForClasses({ComponentName}Model.class);
        context.load().json("/test-data/{component-name}.json", "/content/test");
        model = context.request().adaptTo({ComponentName}Model.class);
    }
    
    @Test
    void testModelInitialization() {
        assertThat(model).isNotNull();
    }
    
    @Test
    void testGetTitle() {
        assertThat(model.getTitle()).isEqualTo("Expected Title");
    }
    
    @Test
    void testGetDescription() {
        assertThat(model.getDescription()).isEqualTo("Expected Description");
    }
    
    @Test
    void testGetImage() {
        assertThat(model.getImage()).isNotNull();
    }
    
    @Test
    void testGetLink() {
        assertThat(model.getLink()).isNotNull();
    }
    
    @Test
    void testIsConfigured() {
        assertThat(model.isConfigured()).isTrue();
    }
}
```

**2. Service Tests:**
```java
@ExtendWith({AemContextExtension.class})
class {ServiceName}Test {
    
    private final AemContext context = new AemContext();
    private {ServiceName} service;
    
    @BeforeEach
    void setUp() {
        context.addModelsForClasses({ServiceName}.class);
        service = context.registerInjectActivateService(new {ServiceName}Impl());
    }
    
    @Test
    void testServiceActivation() {
        assertThat(service).isNotNull();
    }
    
    @Test
    void testServiceMethod() {
        String result = service.performAction("test");
        assertThat(result).isEqualTo("expected result");
    }
}
```

**3. Servlet Tests:**
```java
@ExtendWith({AemContextExtension.class})
class {ServletName}Test {
    
    private final AemContext context = new AemContext();
    private {ServletName} servlet;
    
    @BeforeEach
    void setUp() {
        servlet = new {ServletName}();
        context.registerService(servlet);
    }
    
    @Test
    void testDoGet() throws Exception {
        context.request().setMethod("GET");
        servlet.doGet(context.request(), context.response());
        
        assertThat(context.response().getStatus()).isEqualTo(200);
        assertThat(context.response().getContentType()).isEqualTo("application/json");
    }
    
    @Test
    void testDoPost() throws Exception {
        context.request().setMethod("POST");
        servlet.doPost(context.request(), context.response());
        
        assertThat(context.response().getStatus()).isEqualTo(200);
    }
}
```

#### **ЁЯЪи MANDATORY: Test Data Files - NO EXCEPTIONS**

**Create test data JSON files in:**
```
{project}/core/src/test/resources/test-data/
тФФтФАтФА {component-name}.json
```

**Test Data Structure:**
```json
{
  "jcr:primaryType": "cq:Page",
  "jcr:content": {
    "jcr:primaryType": "cq:PageContent",
    "sling:resourceType": "cjcjtest2/components/{component-name}",
    "title": "Test Title",
    "description": "Test Description",
    "image": "/content/dam/test/image.jpg",
    "link": "/content/test-page",
    "text": "Test Text Content"
  }
}
```

#### **ЁЯЪи MANDATORY: Testing Dependencies - NO EXCEPTIONS**

**Ensure these dependencies are in core/pom.xml:**
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>io.wcm</groupId>
    <artifactId>io.wcm.testing.aem-mock.junit5</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.assertj</groupId>
    <artifactId>assertj-core</artifactId>
    <scope>test</scope>
</dependency>
```

#### **ЁЯЪи MANDATORY: Test Execution - NO EXCEPTIONS**

**Run tests after component creation:**
```bash
mvn test -pl core
```

**Test Coverage Requirements:**
- **Sling Models**: 100% method coverage
- **Services**: 100% method coverage  
- **Servlets**: 100% endpoint coverage
- **Business Logic**: 100% branch coverage

#### **ЁЯЪи MANDATORY: Test Validation Checklist - NO EXCEPTIONS**

**Before considering component complete, verify:**
- [ ] **Test files created** - All test classes generated
- [ ] **Test data provided** - JSON test data files created
- [ ] **Dependencies added** - Testing dependencies in pom.xml
- [ ] **Tests pass** - All tests execute successfully
- [ ] **Coverage adequate** - Required coverage levels met
- [ ] **Edge cases tested** - Null values, empty strings, invalid data
- [ ] **Error conditions tested** - Exception handling verified

#### **ЁЯЪи MANDATORY: Complexity-Based Testing - NO EXCEPTIONS**

**Simple Components:**
- Basic getter/setter tests
- Null value handling
- Default value validation

**Medium Complexity Components:**
- Business logic testing
- Data transformation testing
- Service integration testing
- Error handling testing

**High Complexity Components:**
- Full integration testing
- Performance testing
- Security testing
- API endpoint testing
- Database interaction testing

#### **ЁЯЪи MANDATORY: Test Naming Conventions - NO EXCEPTIONS**

**Test Class Names:**
- `{ComponentName}ModelTest` for Sling Models
- `{ServiceName}Test` for Services
- `{ServletName}Test` for Servlets

**Test Method Names:**
- `test{MethodName}()` for getter methods
- `test{MethodName}With{Condition}()` for conditional logic
- `test{MethodName}Throws{Exception}()` for error conditions

**Example:**
```java
@Test
void testGetTitle() { }

@Test
void testGetTitleWithNullValue() { }

@Test
void testGetTitleThrowsException() { }
```

#### **ЁЯЪи MANDATORY: Test Documentation - NO EXCEPTIONS**

**Each test class must include:**
- Class-level JavaDoc explaining test purpose
- Method-level JavaDoc for complex tests
- Inline comments for non-obvious test logic
- Test data explanation in JSON files

**Example:**
```java
/**
 * Unit tests for HeroBannerModel
 * Tests component data binding, business logic, and error handling
 */
@ExtendWith({AemContextExtension.class})
class HeroBannerModelTest {
    
    /**
     * Tests that the model initializes correctly with valid data
     */
    @Test
    void testModelInitialization() {
        // Test implementation
    }
}
```

#### **ЁЯЪи MANDATORY: Test Failure Handling - NO EXCEPTIONS**

**If tests fail:**
1. **Fix failing tests** - Address test implementation issues
2. **Fix component code** - Address component logic issues
3. **Update test data** - Ensure test data matches component expectations
4. **Re-run tests** - Verify all tests pass
5. **Document fixes** - Update test documentation

**Test failures indicate:**
- Component logic errors
- Missing null checks
- Incorrect data binding
- Service integration issues
- Servlet endpoint problems

#### **ЁЯЪи MANDATORY: Continuous Testing - NO EXCEPTIONS**

**Run tests during development:**
- After each component creation
- Before component deployment
- During batch processing
- After any component modification

**Test execution commands:**
```bash
# Run all tests
mvn test

# Run specific module tests
mvn test -pl core

# Run with coverage report
mvn test jacoco:report

# Run specific test class
mvn test -Dtest={ComponentName}ModelTest
```

**ЁЯЪи CRITICAL: NO COMPONENT IS COMPLETE WITHOUT COMPREHENSIVE UNIT TESTS - NO EXCEPTIONS**

### **ЁЯЪи MANDATORY: Batch Processing Guidelines - NO EXCEPTIONS** (AI Reference Only)

**тЪая╕П CRITICAL: When processing multiple images/components, ALWAYS follow these guidelines:**

#### **ЁЯЪи MANDATORY: Batch Analysis Rules:** (AI Reference Only)
1. **ЁЯЪи MANDATORY: Process images sequentially** - Never skip or combine image analysis
2. **ЁЯЪи MANDATORY: Show progress indicators** - Display "Processing Image X of Y" for each step
3. **ЁЯЪи MANDATORY: Maintain individual quality** - Each component must meet all quality standards
4. **ЁЯЪи MANDATORY: Create comprehensive components.json** - Single file with all components
5. **ЁЯЪи MANDATORY: Include all context files** - Create context files for medium/high complexity components

#### **ЁЯЪи MANDATORY: Batch Development Rules:** (AI Reference Only)
1. **ЁЯЪи MANDATORY: Create all component directories** - Each component gets its own folder structure
2. **ЁЯЪи MANDATORY: Generate all required files** - HTL, Sling Models, dialogs, SCSS, Unit Tests, Quality-compliant code for each component
3. **ЁЯЪи MANDATORY: Follow project conventions** - Maintain consistency across all components
4. **ЁЯЪи MANDATORY: Validate each component** - Ensure all components pass quality checks
5. **ЁЯЪи MANDATORY: Show completion summary** - Display total components and files created
6. **ЁЯЪи MANDATORY: Fix HTL compilation errors** - Use proper context for style attributes (`@ context='styleString'`)
7. **ЁЯЪи MANDATORY: Test build after generation** - Run `mvn clean compile -pl ui.apps` to verify compilation

#### **ЁЯЪи CRITICAL: ANTI-DEVIATION RULES - NO EXCEPTIONS** (AI Reference Only)
**тЪая╕П CRITICAL: PREVENT RULE VIOLATIONS - MANDATORY COMPLIANCE:**

1. **ЁЯЪи MANDATORY: NEVER try to "optimize" or create "in parallel"** - Always follow sequential processing exactly as specified
2. **ЁЯЪи MANDATORY: NEVER stop before completing ALL components** - Complete every single component before any cleanup
3. **ЁЯЪи MANDATORY: NEVER assume what would be "efficient"** - Follow the exact mandatory workflow rules
4. **ЁЯЪи MANDATORY: NEVER lose track of batch processing requirements** - Maintain awareness of total component count
5. **ЁЯЪи MANDATORY: NEVER deviate from specified process** - No shortcuts, no modifications, no assumptions
6. **ЁЯЪи MANDATORY: ALWAYS show "Creating Component X of Y" for each component** - Display progress indicators throughout
7. **ЁЯЪи MANDATORY: ALWAYS complete ALL components before stopping** - Never leave components incomplete
8. **ЁЯЪи MANDATORY: ALWAYS verify completion before cleanup** - Use verification rules to ensure 100% completion
9. **ЁЯЪи MANDATORY: ALWAYS follow the exact mandatory workflow rules** - No deviations, no shortcuts, no assumptions
10. **ЁЯЪи MANDATORY: ALWAYS report violations immediately** - If any deviation occurs, report and correct immediately

**ЁЯЪи CRITICAL: DEVIATION PREVENTION FORMAT - NO EXCEPTIONS:**
```
Component Development Progress:
- Total Components Required: X
- Components Completed: Y
- Components Remaining: Z
- Status: [IN PROGRESS/COMPLETE]

Current Component: [Component Name] (X of Y)
Next Component: [Next Component Name]
```

**ЁЯЪи CRITICAL: These anti-deviation rules are MANDATORY and cannot be bypassed - NO EXCEPTIONS**

#### **ЁЯЪи CRITICAL: COMPONENT VERIFICATION RULES - NO EXCEPTIONS** (AI Reference Only)
**тЪая╕П CRITICAL: MANDATORY VERIFICATION BEFORE ANY CLEANUP - NO EXCEPTIONS:**

1. **ЁЯЪи MANDATORY: Count components in components.json** - Always count total components in JSON file first
2. **ЁЯЪи MANDATORY: Count created components** - Count actual component directories created
3. **ЁЯЪи MANDATORY: Verify 100% match** - JSON count MUST equal created count - NO EXCEPTIONS
4. **ЁЯЪи MANDATORY: List missing components** - If counts don't match, list exactly which components are missing
5. **ЁЯЪи MANDATORY: Create missing components** - Create ALL missing components before proceeding
6. **ЁЯЪи MANDATORY: Re-verify after creation** - Count again after creating missing components
7. **ЁЯЪи MANDATORY: Only delete components.json after 100% verification** - Never delete JSON file until ALL components verified created
8. **ЁЯЪи MANDATORY: Show verification summary** - Display "X components in JSON, Y components created, Z missing" format
9. **ЁЯЪи MANDATORY: Never skip verification** - This step cannot be bypassed, combined, or modified
10. **ЁЯЪи MANDATORY: Report violations immediately** - If verification fails, report exact missing components

**ЁЯЪи CRITICAL: VERIFICATION FORMAT - NO EXCEPTIONS:**
```
Component Verification Summary:
- Components in JSON: X
- Components Created: Y  
- Missing Components: Z
- Status: [COMPLETE/INCOMPLETE]

Missing Components (if any):
1. [Component Name 1]
2. [Component Name 2]
...
```

**ЁЯЪи CRITICAL: This verification is MANDATORY and cannot be skipped - NO EXCEPTIONS**

#### **ЁЯЪи MANDATORY: Batch Quality Assurance:** (AI Reference Only)
1. **ЁЯЪи MANDATORY: Test each component individually** - Verify functionality of each component
2. **ЁЯЪи MANDATORY: Check for naming conflicts** - Ensure unique component names
3. **ЁЯЪи MANDATORY: Validate file structure** - Confirm all files are in correct locations
4. **ЁЯЪи MANDATORY: Verify responsive design** - Test all components on different screen sizes
5. **ЁЯЪи MANDATORY: Check accessibility compliance** - Ensure all components meet WCAG standards
6. **ЁЯЪи MANDATORY: Run unit tests** - Execute `mvn test -pl core` for all components
7. **ЁЯЪи MANDATORY: Verify test coverage** - Ensure 100% method coverage for Sling Models
8. **ЁЯЪи MANDATORY: Run Excel-based quality checks** - Validate against `CodeQuality-rules-latest-CS-2024-12-0.xlsx`
9. **ЁЯЪи MANDATORY: Validate security compliance** - Check Excel file security rules (Critical)
10. **ЁЯЪи MANDATORY: Validate reliability compliance** - Check Excel file reliability rules (Critical)
11. **ЁЯЪи MANDATORY: Validate maintainability compliance** - Check Excel file maintainability rules (Important)
12. **ЁЯЪи MANDATORY: Validate AEM-specific rules** - Check annotations, service patterns
13. **ЁЯЪи MANDATORY: Fix failing tests** - Address any test failures before completion
14. **ЁЯЪи MANDATORY: Fix quality violations** - Address any Excel file rule violations
15. **ЁЯЪи MANDATORY: Notify user** - Display "тЬЕ Code quality rules from Excel file applied"

**Why Batch Processing Matters:** (AI Reference Only)
- тЬЕ **Efficiency** - Process multiple components in one workflow
- тЬЕ **Consistency** - Maintain uniform quality across all components
- тЬЕ **Scalability** - Handle large design systems with multiple components
- тЬЕ **Time Savings** - Reduce repetitive analysis and development tasks

## **ЁЯЪи COMMON ISSUES AND SOLUTIONS**

### **Multifield Data Not Displaying**
- **Issue**: Authored multifield content not showing in HTL
- **Solution**: Use `@ChildResource` in Sling Model, not `@ValueMapValue`
- **Solution**: Verify HTL template uses `model.getArticleData()` method
- **Solution**: Test authored content display after generation

### **Image Path Issues**
- **Issue**: Malformed image paths in HTL output
- **Solution**: Use actual image paths from dialog, not constructed paths
- **Solution**: Verify pathfield stores full DAM paths correctly
- **Solution**: Test image display with real authored content

### **Missing Dialog Fields**
- **Issue**: Visual elements in design missing from dialog
- **Solution**: Analyze design thoroughly for all images/illustrations
- **Solution**: Create dialog fields for every visual element
- **Solution**: Use appropriate field types (pathfield for images)

### **Logging Issues**
- **Issue**: Using System.out.println instead of proper logging
- **Solution**: Use log4j `logger.debug()` for debugging
- **Solution**: Add proper logger field to Sling Model
- **Solution**: Use structured logging for troubleshooting

### **Layout Structure Issues**
- **Issue**: Component layout doesn't match Figma design
- **Solution**: Analyze Figma design for proper column structure
- **Solution**: Update HTL template to match design layout
- **Solution**: Update SCSS to support proper layout structure
